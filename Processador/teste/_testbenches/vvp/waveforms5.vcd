$date
	Wed May 31 01:31:54 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Processador_tb $end
$var reg 1 ! clk_tb $end
$var reg 1 " reset_tb $end
$scope module Proce $end
$var wire 1 # JAL $end
$var wire 1 $ JALR $end
$var wire 5 % address [4:0] $end
$var wire 1 ! clk $end
$var wire 64 & dout_FD [63:0] $end
$var wire 1 " reset $end
$var wire 7 ' opcode [6:0] $end
$var wire 32 ( instruction [31:0] $end
$var wire 64 ) dout_memoria [63:0] $end
$var wire 1 * WE $end
$var wire 2 + ULAop [1:0] $end
$var wire 1 , RF_load $end
$var wire 1 - PC_load $end
$var wire 32 . PC [31:0] $end
$var wire 2 / OP_MEM_I [1:0] $end
$var wire 1 0 IR_load $end
$scope module FD $end
$var wire 1 # JAL $end
$var wire 1 $ JALR $end
$var wire 5 1 addr_RAM [4:0] $end
$var wire 1 ! clk $end
$var wire 1 2 clk_IR $end
$var wire 64 3 data_RAM [63:0] $end
$var wire 1 " reset $end
$var wire 3 4 select_flags [2:0] $end
$var wire 7 5 opcode [6:0] $end
$var wire 4 6 op [3:0] $end
$var wire 32 7 instruction_IR_out [31:0] $end
$var wire 32 8 instruction [31:0] $end
$var wire 32 9 imm [31:0] $end
$var wire 7 : funct7 [6:0] $end
$var wire 3 ; funct3 [2:0] $end
$var wire 6 < flags [5:0] $end
$var wire 64 = doutB [63:0] $end
$var wire 64 > doutA [63:0] $end
$var wire 32 ? addr_instruction [31:0] $end
$var wire 2 @ ULAop [1:0] $end
$var wire 64 A ULA_OUT [63:0] $end
$var wire 5 B Rw [4:0] $end
$var wire 5 C Rb [4:0] $end
$var wire 5 D Ra [4:0] $end
$var wire 1 , RF_load $end
$var wire 64 E RF_input [63:0] $end
$var wire 1 - PC_load $end
$var wire 32 F PC_addr [31:0] $end
$var wire 2 G OP_MEM_I [1:0] $end
$var wire 64 H OFFSET [63:0] $end
$var wire 1 0 IR_load $end
$var wire 64 I Data [63:0] $end
$scope module IR $end
$var wire 1 2 clk $end
$var wire 1 " reset $end
$var wire 32 J x [31:0] $end
$var wire 1 0 load $end
$var reg 32 K x_out [31:0] $end
$upscope $end
$scope module Inputs_rf_pc_controller $end
$var wire 1 # JAL $end
$var wire 1 $ JALR $end
$var wire 3 L select_flags [2:0] $end
$var wire 1 M soma_PC_selector $end
$var wire 1 N selected_flag $end
$var wire 2 O select_RF [1:0] $end
$var wire 32 P imm_or_const [31:0] $end
$var wire 64 Q imm64 [63:0] $end
$var wire 32 R imm32 [31:0] $end
$var wire 6 S flags [5:0] $end
$var wire 64 T doutA [63:0] $end
$var wire 64 U dIN_JAL [63:0] $end
$var wire 64 V addr_instruction64 [63:0] $end
$var wire 32 W addr_instruction32 [31:0] $end
$var wire 64 X ULA_OUT [63:0] $end
$var wire 64 Y RF_input [63:0] $end
$var wire 32 Z PC_or_RS [31:0] $end
$var wire 32 [ PC_addr32 [31:0] $end
$var wire 64 \ Data [63:0] $end
$scope module MUX2 $end
$var wire 32 ] a [31:0] $end
$var wire 1 M select $end
$var wire 32 ^ result [31:0] $end
$var wire 32 _ b [31:0] $end
$upscope $end
$scope module MUX4_RF $end
$var wire 64 ` d [63:0] $end
$var wire 2 a select [1:0] $end
$var wire 64 b result [63:0] $end
$var wire 64 c c [63:0] $end
$var wire 64 d b [63:0] $end
$var wire 64 e a [63:0] $end
$upscope $end
$scope module MUX8 $end
$var wire 3 f select [2:0] $end
$var wire 6 g flags [5:0] $end
$var reg 1 N flag $end
$upscope $end
$scope module addPC $end
$var wire 32 h a [31:0] $end
$var wire 32 i b [31:0] $end
$var wire 32 j result [31:0] $end
$upscope $end
$upscope $end
$scope module PCreg $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 k x [31:0] $end
$var wire 1 - load $end
$var reg 32 l x_out [31:0] $end
$upscope $end
$scope module RegFile $end
$var wire 1 ! clk $end
$var wire 64 m dIN [63:0] $end
$var wire 32 n loads [31:0] $end
$var wire 1 , WE_Reg $end
$var wire 5 o Rw [4:0] $end
$var wire 5 p Rb [4:0] $end
$var wire 5 q Ra [4:0] $end
$var reg 64 r doutA [63:0] $end
$var reg 64 s doutB [63:0] $end
$var integer 32 t j [31:0] $end
$var integer 32 u k [31:0] $end
$scope begin genblk1[1] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 v load $end
$var wire 64 w x [63:0] $end
$var reg 64 x x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 y load $end
$var wire 64 z x [63:0] $end
$var reg 64 { x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 | load $end
$var wire 64 } x [63:0] $end
$var reg 64 ~ x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 !" load $end
$var wire 64 "" x [63:0] $end
$var reg 64 #" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 $" load $end
$var wire 64 %" x [63:0] $end
$var reg 64 &" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 '" load $end
$var wire 64 (" x [63:0] $end
$var reg 64 )" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 *" load $end
$var wire 64 +" x [63:0] $end
$var reg 64 ," x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 -" load $end
$var wire 64 ." x [63:0] $end
$var reg 64 /" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 0" load $end
$var wire 64 1" x [63:0] $end
$var reg 64 2" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 3" load $end
$var wire 64 4" x [63:0] $end
$var reg 64 5" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 6" load $end
$var wire 64 7" x [63:0] $end
$var reg 64 8" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 9" load $end
$var wire 64 :" x [63:0] $end
$var reg 64 ;" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 <" load $end
$var wire 64 =" x [63:0] $end
$var reg 64 >" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 ?" load $end
$var wire 64 @" x [63:0] $end
$var reg 64 A" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 B" load $end
$var wire 64 C" x [63:0] $end
$var reg 64 D" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 E" load $end
$var wire 64 F" x [63:0] $end
$var reg 64 G" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 H" load $end
$var wire 64 I" x [63:0] $end
$var reg 64 J" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 K" load $end
$var wire 64 L" x [63:0] $end
$var reg 64 M" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 N" load $end
$var wire 64 O" x [63:0] $end
$var reg 64 P" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 Q" load $end
$var wire 64 R" x [63:0] $end
$var reg 64 S" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 T" load $end
$var wire 64 U" x [63:0] $end
$var reg 64 V" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 W" load $end
$var wire 64 X" x [63:0] $end
$var reg 64 Y" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 Z" load $end
$var wire 64 [" x [63:0] $end
$var reg 64 \" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 ]" load $end
$var wire 64 ^" x [63:0] $end
$var reg 64 _" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 `" load $end
$var wire 64 a" x [63:0] $end
$var reg 64 b" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 c" load $end
$var wire 64 d" x [63:0] $end
$var reg 64 e" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 f" load $end
$var wire 64 g" x [63:0] $end
$var reg 64 h" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 i" load $end
$var wire 64 j" x [63:0] $end
$var reg 64 k" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 l" load $end
$var wire 64 m" x [63:0] $end
$var reg 64 n" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 o" load $end
$var wire 64 p" x [63:0] $end
$var reg 64 q" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[31] $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 r" load $end
$var wire 64 s" x [63:0] $end
$var reg 64 t" x_out [63:0] $end
$upscope $end
$upscope $end
$scope module Regs $end
$var wire 1 ! clk $end
$var wire 1 u" load $end
$var wire 64 v" x [63:0] $end
$var reg 64 w" x_out [63:0] $end
$upscope $end
$upscope $end
$scope module Seletor_ula $end
$var wire 64 x" OFFSET [63:0] $end
$var wire 64 y" dinA [63:0] $end
$var wire 64 z" dinB [63:0] $end
$var wire 64 {" dout [63:0] $end
$var wire 64 |" doutA [63:0] $end
$var wire 64 }" doutB [63:0] $end
$var wire 4 ~" op [3:0] $end
$var wire 6 !# flags [5:0] $end
$var wire 64 "# ULA_OUT [63:0] $end
$var wire 64 ## ULA_IN1 [63:0] $end
$var wire 64 $# ULA_IN0 [63:0] $end
$var wire 2 %# OP_MEM_I [1:0] $end
$scope module ULA $end
$var wire 64 &# result [63:0] $end
$var wire 4 '# op [3:0] $end
$var wire 6 (# flags [5:0] $end
$var wire 64 )# b [63:0] $end
$var wire 64 *# a [63:0] $end
$upscope $end
$scope module mux0 $end
$var wire 64 +# a [63:0] $end
$var wire 64 ,# b [63:0] $end
$var wire 64 -# c [63:0] $end
$var wire 64 .# d [63:0] $end
$var wire 2 /# select [1:0] $end
$var wire 64 0# result [63:0] $end
$upscope $end
$scope module mux1 $end
$var wire 64 1# a [63:0] $end
$var wire 64 2# b [63:0] $end
$var wire 64 3# c [63:0] $end
$var wire 64 4# d [63:0] $end
$var wire 2 5# select [1:0] $end
$var wire 64 6# result [63:0] $end
$upscope $end
$upscope $end
$scope module ULA__control $end
$var wire 7 7# funct7 [6:0] $end
$var wire 3 8# funct3 [2:0] $end
$var wire 2 9# ULAop [1:0] $end
$var reg 4 :# op [3:0] $end
$upscope $end
$scope module instruction_organizor $end
$var wire 32 ;# instruction [31:0] $end
$var wire 7 <# opcode [6:0] $end
$var reg 5 =# Ra [4:0] $end
$var reg 5 ># Rb [4:0] $end
$var reg 5 ?# Rw [4:0] $end
$var reg 3 @# funct3 [2:0] $end
$var reg 7 A# funct7 [6:0] $end
$var reg 32 B# immediate [31:0] $end
$upscope $end
$upscope $end
$scope module Mem $end
$var wire 32 C# PC [31:0] $end
$var wire 5 D# address [4:0] $end
$var wire 1 ! clk $end
$var wire 64 E# dIn [63:0] $end
$var wire 32 F# instruction [31:0] $end
$var wire 32 G# instruction_interno [31:0] $end
$var wire 64 H# data_out [63:0] $end
$var wire 1 * WE $end
$scope module MemD $end
$var wire 5 I# address [4:0] $end
$var wire 1 ! clk $end
$var wire 64 J# dIN [63:0] $end
$var wire 64 K# dout [63:0] $end
$var wire 1 * WE_mem $end
$upscope $end
$scope module MemI $end
$var wire 32 L# PC [31:0] $end
$var wire 32 M# instruction [31:0] $end
$upscope $end
$upscope $end
$scope module UnitControl $end
$var wire 1 ! clk $end
$var wire 7 N# opcode [6:0] $end
$var wire 1 " reset $end
$var reg 1 0 IR_load $end
$var reg 2 O# OP_MEM_I [1:0] $end
$var reg 1 - PC_load $end
$var reg 1 , RF_load $end
$var reg 2 P# ULAop [1:0] $end
$var reg 1 * WEMem $end
$var reg 1 Q# select_JAL $end
$var reg 1 R# select_JALR $end
$var reg 5 S# state [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx S#
xR#
xQ#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bz J#
bz I#
bx H#
bx G#
bx F#
bz E#
bz D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
b0 4#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 3#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2#
bx 1#
bx 0#
bx /#
b0 .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bz }"
bz |"
bx {"
bx z"
bx y"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx x"
bx w"
b0 v"
1u"
bx t"
bx s"
xr"
bx q"
bx p"
xo"
bx n"
bx m"
xl"
bx k"
bx j"
xi"
bx h"
bx g"
xf"
bx e"
bx d"
xc"
bx b"
bx a"
x`"
bx _"
bx ^"
x]"
bx \"
bx ["
xZ"
bx Y"
bx X"
xW"
bx V"
bx U"
xT"
bx S"
bx R"
xQ"
bx P"
bx O"
xN"
bx M"
bx L"
xK"
bx J"
bx I"
xH"
bx G"
bx F"
xE"
bx D"
bx C"
xB"
bx A"
bx @"
x?"
bx >"
bx ="
x<"
bx ;"
bx :"
x9"
bx 8"
bx 7"
x6"
bx 5"
bx 4"
x3"
bx 2"
bx 1"
x0"
bx /"
bx ."
x-"
bx ,"
bx +"
x*"
bx )"
bx ("
x'"
bx &"
bx %"
x$"
bx #"
bx ""
x!"
bx ~
bx }
x|
bx {
bx z
xy
bx x
bx w
xv
bx u
b100000 t
bx s
bx r
bx q
bx p
bx o
bxz n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bz f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
b100 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx V
bx U
bx T
bx S
bx R
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Q
bx P
bx O
0N
xM
bz L
bx K
bx J
bx I
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bz 4
bz 3
12
bz 1
x0
bx /
bx .
x-
x,
bx +
x*
bx )
bx (
bx '
bz &
bz %
z$
x#
0"
0!
$end
#1000
0r"
0o"
0l"
0i"
0f"
0c"
0`"
0]"
0Z"
0W"
0T"
0Q"
0N"
0K"
0H"
0E"
0B"
0?"
0<"
09"
06"
03"
00"
0-"
0*"
0'"
0$"
0!"
0|
0y
0v
b0z n
0-
b0 +
b0 @
b0 9#
b0 P#
00
0,
0*
0#
0R#
0Q#
b0 /
b0 G
b0 O
b0 a
b0 %#
b0 /#
b0 5#
b0 O#
b11 '
b11 5
b11 N#
b0 V
b100000001000010000011 (
b100000001000010000011 8
b100000001000010000011 J
b100000001000010000011 F#
b100000001000010000011 G#
b100000001000010000011 M#
b0 .
b0 ?
b0 W
b0 l
b0 C#
b0 L#
b0 w"
b0 S#
02
b100000 u
1!
1"
#2000
12
0!
0"
#3000
10
1-
b1 S#
02
b100000 u
1!
#4000
b0 ##
b0 )#
b0 6#
b0 =
b0 s
b0 z"
b0 ,#
b0 1#
b0x0x U
b0x0x `
b0x0x P
b0x0x ^
b0x0x h
b1 Q
b1 H
b1 x"
b1 2#
b1 3#
b1 ;
b1 8#
b1 @#
b1 B
b1 o
b1 ?#
b0 C
b0 p
b0 >#
b1 9
b1 R
b1 _
b1 B#
b11 <#
b100000001000010000011 7
b100000001000010000011 K
b100000001000010000011 ;#
12
0!
#5000
00
0-
bx U
bx `
bx '
bx 5
bx N#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx V
bx (
bx 8
bx J
bx F#
bx G#
bx M#
bx .
bx ?
bx W
bx l
bx C#
bx L#
b10 S#
02
b100000 u
1!
#6000
12
0!
#7000
02
b100000 u
1!
#8000
12
0!
#9000
02
b100000 u
1!
#10000
12
0!
#11000
02
b100000 u
1!
#12000
12
0!
#13000
02
b100000 u
1!
#14000
12
0!
#15000
02
b100000 u
1!
#16000
12
0!
#17000
02
b100000 u
1!
#18000
12
0!
#19000
02
b100000 u
1!
#20000
12
0!
#21000
02
b100000 u
1!
#22000
12
0!
#23000
02
b100000 u
1!
#24000
12
0!
#25000
02
b100000 u
1!
#26000
12
0!
#27000
02
b100000 u
1!
#28000
12
0!
#29000
02
b100000 u
1!
#30000
12
0!
#31000
02
b100000 u
1!
#32000
12
0!
#33000
02
b100000 u
1!
#34000
12
0!
#35000
02
b100000 u
1!
#36000
12
0!
#37000
02
b100000 u
1!
#38000
12
0!
#39000
02
b100000 u
1!
#40000
12
0!
#41000
02
b100000 u
1!
#42000
12
0!
#43000
02
b100000 u
1!
#44000
12
0!
#45000
02
b100000 u
1!
#46000
12
0!
#47000
02
b100000 u
1!
#48000
12
0!
#49000
02
b100000 u
1!
#50000
12
0!
#51000
02
b100000 u
1!
#52000
12
0!
