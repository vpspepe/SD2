$date
	Tue May 09 21:18:29 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Instruction_FD_tb $end
$var reg 1 ! ADD_SUB_tb $end
$var reg 2 " OP_MEM_I_tb [1:0] $end
$var reg 1 # PC_load_tb $end
$var reg 1 $ WE_mem_tb $end
$var reg 1 % WE_reg_tb $end
$var reg 1 & clk_tb $end
$var reg 1 ' reset_tb $end
$var reg 3 ( select_flags_tb [2:0] $end
$scope module instruction_fd $end
$var wire 1 ! ADD_SUB $end
$var wire 2 ) OP_MEM_I [1:0] $end
$var wire 1 # PC_load $end
$var wire 1 $ WE_mem $end
$var wire 1 % WE_reg $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 3 * select_flags [2:0] $end
$var wire 1 + selected_flag $end
$var wire 32 , instruction [31:0] $end
$var wire 32 - imm_or_const [31:0] $end
$var wire 64 . imm [63:0] $end
$var wire 6 / flags [5:0] $end
$var wire 32 0 addr_instruction [31:0] $end
$var wire 5 1 Rw [4:0] $end
$var wire 5 2 Rb [4:0] $end
$var wire 5 3 Ra [4:0] $end
$var wire 32 4 PC_addr [31:0] $end
$scope module FD $end
$var wire 1 ! ADD_SUB $end
$var wire 64 5 OFFSET [63:0] $end
$var wire 2 6 OP_MEM_I [1:0] $end
$var wire 5 7 Ra [4:0] $end
$var wire 5 8 Rb [4:0] $end
$var wire 5 9 Rw [4:0] $end
$var wire 1 $ WE_mem $end
$var wire 1 % WE_reg $end
$var wire 1 & clk $end
$var wire 64 : doutMem [63:0] $end
$var wire 64 ; final_address [63:0] $end
$var wire 64 < regIN_memOUT [63:0] $end
$var wire 6 = flags [5:0] $end
$var wire 64 > doutB [63:0] $end
$var wire 64 ? doutA [63:0] $end
$var wire 64 @ ULA_OUT [63:0] $end
$var wire 64 A Dw [63:0] $end
$scope module MUX4 $end
$var wire 64 B d [63:0] $end
$var wire 2 C select [1:0] $end
$var wire 64 D result [63:0] $end
$var wire 64 E c [63:0] $end
$var wire 64 F b [63:0] $end
$var wire 64 G a [63:0] $end
$upscope $end
$scope module Memoria $end
$var wire 1 $ WE_mem $end
$var wire 1 & clk $end
$var wire 64 H dout [63:0] $end
$var wire 5 I final_address [4:0] $end
$var wire 64 J dIN [63:0] $end
$upscope $end
$scope module Operacao_memoria $end
$var wire 1 ! ADD_SUB $end
$var wire 64 K OFFSET [63:0] $end
$var wire 2 L OP_MEM_I [1:0] $end
$var wire 64 M dout [63:0] $end
$var wire 64 N doutA [63:0] $end
$var wire 64 O doutB [63:0] $end
$var wire 6 P flags [5:0] $end
$var wire 64 Q dinB [63:0] $end
$var wire 64 R dinA [63:0] $end
$var wire 64 S ULA_OUT [63:0] $end
$var wire 64 T ULA_IN1 [63:0] $end
$var wire 64 U ULA_IN0 [63:0] $end
$scope module ULA $end
$var wire 1 ! soma_sub $end
$var wire 64 V result [63:0] $end
$var wire 6 W flags [5:0] $end
$var wire 64 X b [63:0] $end
$var wire 64 Y a [63:0] $end
$var parameter 32 Z BEQ $end
$var parameter 32 [ BGE $end
$var parameter 32 \ BGEU $end
$var parameter 32 ] BLT $end
$var parameter 32 ^ BLTU $end
$var parameter 32 _ BNE $end
$upscope $end
$scope module mux0 $end
$var wire 64 ` d [63:0] $end
$var wire 2 a select [1:0] $end
$var wire 64 b result [63:0] $end
$var wire 64 c c [63:0] $end
$var wire 64 d b [63:0] $end
$var wire 64 e a [63:0] $end
$upscope $end
$scope module mux1 $end
$var wire 64 f b [63:0] $end
$var wire 64 g c [63:0] $end
$var wire 64 h d [63:0] $end
$var wire 2 i select [1:0] $end
$var wire 64 j result [63:0] $end
$var wire 64 k a [63:0] $end
$upscope $end
$upscope $end
$scope module RegFile $end
$var wire 5 l Ra [4:0] $end
$var wire 5 m Rb [4:0] $end
$var wire 5 n Rw [4:0] $end
$var wire 1 % WE_Reg $end
$var wire 1 & clk $end
$var wire 64 o dIN [63:0] $end
$var wire 32 p loads [31:0] $end
$var reg 64 q doutA [63:0] $end
$var reg 64 r doutB [63:0] $end
$var integer 32 s j [31:0] $end
$var integer 32 t k [31:0] $end
$scope begin genblk1[1] $end
$var parameter 2 u i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 v load $end
$var wire 64 w x [63:0] $end
$var parameter 32 x N $end
$var reg 64 y x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 z i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 { load $end
$var wire 64 | x [63:0] $end
$var parameter 32 } N $end
$var reg 64 ~ x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 !" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 "" load $end
$var wire 64 #" x [63:0] $end
$var parameter 32 $" N $end
$var reg 64 %" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 &" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 '" load $end
$var wire 64 (" x [63:0] $end
$var parameter 32 )" N $end
$var reg 64 *" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 +" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 ," load $end
$var wire 64 -" x [63:0] $end
$var parameter 32 ." N $end
$var reg 64 /" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 0" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 1" load $end
$var wire 64 2" x [63:0] $end
$var parameter 32 3" N $end
$var reg 64 4" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 5" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 6" load $end
$var wire 64 7" x [63:0] $end
$var parameter 32 8" N $end
$var reg 64 9" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 :" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 ;" load $end
$var wire 64 <" x [63:0] $end
$var parameter 32 =" N $end
$var reg 64 >" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 ?" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 @" load $end
$var wire 64 A" x [63:0] $end
$var parameter 32 B" N $end
$var reg 64 C" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 D" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 E" load $end
$var wire 64 F" x [63:0] $end
$var parameter 32 G" N $end
$var reg 64 H" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 I" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 J" load $end
$var wire 64 K" x [63:0] $end
$var parameter 32 L" N $end
$var reg 64 M" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 N" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 O" load $end
$var wire 64 P" x [63:0] $end
$var parameter 32 Q" N $end
$var reg 64 R" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 S" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 T" load $end
$var wire 64 U" x [63:0] $end
$var parameter 32 V" N $end
$var reg 64 W" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 X" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 Y" load $end
$var wire 64 Z" x [63:0] $end
$var parameter 32 [" N $end
$var reg 64 \" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 ]" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 ^" load $end
$var wire 64 _" x [63:0] $end
$var parameter 32 `" N $end
$var reg 64 a" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 b" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 c" load $end
$var wire 64 d" x [63:0] $end
$var parameter 32 e" N $end
$var reg 64 f" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 g" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 h" load $end
$var wire 64 i" x [63:0] $end
$var parameter 32 j" N $end
$var reg 64 k" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$var parameter 6 l" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 m" load $end
$var wire 64 n" x [63:0] $end
$var parameter 32 o" N $end
$var reg 64 p" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$var parameter 6 q" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 r" load $end
$var wire 64 s" x [63:0] $end
$var parameter 32 t" N $end
$var reg 64 u" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$var parameter 6 v" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 w" load $end
$var wire 64 x" x [63:0] $end
$var parameter 32 y" N $end
$var reg 64 z" x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$var parameter 6 {" i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 |" load $end
$var wire 64 }" x [63:0] $end
$var parameter 32 ~" N $end
$var reg 64 !# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$var parameter 6 "# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 ## load $end
$var wire 64 $# x [63:0] $end
$var parameter 32 %# N $end
$var reg 64 &# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$var parameter 6 '# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 (# load $end
$var wire 64 )# x [63:0] $end
$var parameter 32 *# N $end
$var reg 64 +# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$var parameter 6 ,# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 -# load $end
$var wire 64 .# x [63:0] $end
$var parameter 32 /# N $end
$var reg 64 0# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$var parameter 6 1# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 2# load $end
$var wire 64 3# x [63:0] $end
$var parameter 32 4# N $end
$var reg 64 5# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$var parameter 6 6# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 7# load $end
$var wire 64 8# x [63:0] $end
$var parameter 32 9# N $end
$var reg 64 :# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$var parameter 6 ;# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 <# load $end
$var wire 64 =# x [63:0] $end
$var parameter 32 ># N $end
$var reg 64 ?# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$var parameter 6 @# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 A# load $end
$var wire 64 B# x [63:0] $end
$var parameter 32 C# N $end
$var reg 64 D# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$var parameter 6 E# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 F# load $end
$var wire 64 G# x [63:0] $end
$var parameter 32 H# N $end
$var reg 64 I# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$var parameter 6 J# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 K# load $end
$var wire 64 L# x [63:0] $end
$var parameter 32 M# N $end
$var reg 64 N# x_out [63:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[31] $end
$var parameter 6 O# i $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 P# load $end
$var wire 64 Q# x [63:0] $end
$var parameter 32 R# N $end
$var reg 64 S# x_out [63:0] $end
$upscope $end
$upscope $end
$scope module Regs $end
$var wire 1 & clk $end
$var wire 1 T# load $end
$var wire 64 U# x [63:0] $end
$var parameter 32 V# N $end
$var reg 64 W# x_out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module MUX2 $end
$var wire 32 X# a [31:0] $end
$var wire 32 Y# b [31:0] $end
$var wire 1 + select $end
$var wire 32 Z# result [31:0] $end
$upscope $end
$scope module MUX8 $end
$var wire 6 [# flags [5:0] $end
$var wire 3 \# select [2:0] $end
$var parameter 32 ]# BEQ $end
$var parameter 32 ^# BGE $end
$var parameter 32 _# BGEU $end
$var parameter 32 `# BLT $end
$var parameter 32 a# BLTU $end
$var parameter 32 b# BNE $end
$var reg 1 + flag $end
$upscope $end
$scope module PC $end
$var wire 1 & clk $end
$var wire 1 # load $end
$var wire 1 ' reset $end
$var wire 32 c# x [31:0] $end
$var parameter 32 d# N $end
$var reg 32 e# x_out [31:0] $end
$upscope $end
$scope module add $end
$var wire 32 f# a [31:0] $end
$var wire 32 g# b [31:0] $end
$var wire 32 h# result [31:0] $end
$upscope $end
$scope module mem_instruction $end
$var wire 32 i# instruction [31:0] $end
$var wire 32 j# dout [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 d#
b1 b#
b100 a#
b10 `#
b101 _#
b11 ^#
b0 ]#
b1000000 V#
b1000000 R#
b11111 O#
b1000000 M#
b11110 J#
b1000000 H#
b11101 E#
b1000000 C#
b11100 @#
b1000000 >#
b11011 ;#
b1000000 9#
b11010 6#
b1000000 4#
b11001 1#
b1000000 /#
b11000 ,#
b1000000 *#
b10111 '#
b1000000 %#
b10110 "#
b1000000 ~"
b10101 {"
b1000000 y"
b10100 v"
b1000000 t"
b10011 q"
b1000000 o"
b10010 l"
b1000000 j"
b10001 g"
b1000000 e"
b10000 b"
b1000000 `"
b1111 ]"
b1000000 ["
b1110 X"
b1000000 V"
b1101 S"
b1000000 Q"
b1100 N"
b1000000 L"
b1011 I"
b1000000 G"
b1010 D"
b1000000 B"
b1001 ?"
b1000000 ="
b1000 :"
b1000000 8"
b111 5"
b1000000 3"
b110 0"
b1000000 ."
b101 +"
b1000000 )"
b100 &"
b1000000 $"
b11 !"
b1000000 }
b10 z
b1000000 x
b1 u
b1 _
b100 ^
b10 ]
b101 \
b11 [
b0 Z
$end
#0
$dumpvars
b0 j#
b0 i#
b1 h#
b0 g#
b1 f#
b0 e#
b1 c#
bx \#
b101001 [#
b1 Z#
b0 Y#
b1 X#
b0 W#
b0 U#
1T#
bx S#
b0 Q#
0P#
bx N#
b0 L#
0K#
bx I#
b0 G#
0F#
bx D#
b0 B#
0A#
bx ?#
b0 =#
0<#
bx :#
b0 8#
07#
bx 5#
b0 3#
02#
bx 0#
b0 .#
0-#
bx +#
b0 )#
0(#
bx &#
b0 $#
0##
bx !#
b0 }"
0|"
bx z"
b0 x"
0w"
bx u"
b0 s"
0r"
bx p"
b0 n"
0m"
bx k"
b0 i"
0h"
bx f"
b0 d"
0c"
bx a"
b0 _"
0^"
bx \"
b0 Z"
0Y"
bx W"
b0 U"
0T"
bx R"
b0 P"
0O"
bx M"
b0 K"
0J"
bx H"
b0 F"
0E"
bx C"
b0 A"
0@"
bx >"
b0 <"
0;"
bx 9"
b0 7"
06"
bx 4"
b0 2"
01"
bx /"
b0 -"
0,"
bx *"
b0 ("
0'"
bx %"
b0 #"
0""
bx ~
b0 |
0{
bx y
b0 w
0v
b100000 t
b100000 s
b0 r
b0 q
b0z p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 Y
b0 X
b101001 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b101001 P
bz O
bz N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b101001 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b1 4
b0 3
b0 2
b0 1
b0 0
b101001 /
b0 .
b1 -
b0 ,
0+
bx *
b0 )
bx (
1'
1&
0%
0$
1#
b0 "
0!
$end
#1000
0&
#1500
0'
#2000
b1010 A
b1010 D
b1010 o
b1010 w
b1010 |
b1010 #"
b1010 ("
b1010 -"
b1010 2"
b1010 7"
b1010 <"
b1010 A"
b1010 F"
b1010 K"
b1010 P"
b1010 U"
b1010 Z"
b1010 _"
b1010 d"
b1010 i"
b1010 n"
b1010 s"
b1010 x"
b1010 }"
b1010 $#
b1010 )#
b1010 .#
b1010 3#
b1010 8#
b1010 =#
b1010 B#
b1010 G#
b1010 L#
b1010 Q#
b10110 /
b10110 =
b10110 P
b10110 W
b10110 [#
b1010 :
b1010 <
b1010 F
b1010 H
b1 I
1v
b1 ;
b1 @
b1 E
b1 G
b1 M
b1 S
b1 V
b1z p
b1 T
b1 X
b1 j
b1 Y#
b1 .
b1 5
b1 K
b1 f
b1 g
b1 1
b1 9
b1 n
b100000001000010000011 ,
b100000001000010000011 j#
b10 4
b10 c#
b10 h#
b1 0
b1 e#
b1 g#
b1 i#
b100000 t
1%
b1 "
b1 )
b1 6
b1 C
b1 L
b1 a
b1 i
1&
#3000
0&
#4000
b10100 A
b10100 D
b10100 o
b10100 w
b10100 |
b10100 #"
b10100 ("
b10100 -"
b10100 2"
b10100 7"
b10100 <"
b10100 A"
b10100 F"
b10100 K"
b10100 P"
b10100 U"
b10100 Z"
b10100 _"
b10100 d"
b10100 i"
b10100 n"
b10100 s"
b10100 x"
b10100 }"
b10100 $#
b10100 )#
b10100 .#
b10100 3#
b10100 8#
b10100 =#
b10100 B#
b10100 G#
b10100 L#
b10100 Q#
b10100 :
b10100 <
b10100 F
b10100 H
b10 I
0v
1{
b10 ;
b10 @
b10 E
b10 G
b10 M
b10 S
b10 V
b10z p
b10 T
b10 X
b10 j
b10 Y#
b10 .
b10 5
b10 K
b10 f
b10 g
b10 1
b10 9
b10 n
b1000000001000100000011 ,
b1000000001000100000011 j#
b1010 y
b11 4
b11 c#
b11 h#
b10 0
b10 e#
b10 g#
b10 i#
b100000 t
1&
#5000
0&
#6000
b1010 U
b1010 Y
b1010 b
b10100 >
b10100 Q
b10100 d
b10100 k
b10100 r
b1010 ?
b1010 J
b1010 R
b1010 c
b1010 e
b1010 q
0{
1""
b100z p
b10 2
b10 8
b10 m
b0 Y#
b11 1
b11 9
b11 n
b0 .
b0 5
b0 K
b0 f
b0 g
b1 3
b1 7
b1 l
b1000001000000110110011 ,
b1000001000000110110011 j#
b100 4
b100 c#
b100 h#
b11 0
b11 e#
b11 g#
b11 i#
b10100 ~
b10110 /
b10110 =
b10110 P
b10110 W
b10110 [#
bx :
bx <
bx F
bx H
b11110 I
b11110 ;
b11110 @
b11110 E
b11110 G
b11110 M
b11110 S
b11110 V
b11110 A
b11110 D
b11110 o
b11110 w
b11110 |
b11110 #"
b11110 ("
b11110 -"
b11110 2"
b11110 7"
b11110 <"
b11110 A"
b11110 F"
b11110 K"
b11110 P"
b11110 U"
b11110 Z"
b11110 _"
b11110 d"
b11110 i"
b11110 n"
b11110 s"
b11110 x"
b11110 }"
b11110 $#
b11110 )#
b11110 .#
b11110 3#
b11110 8#
b11110 =#
b11110 B#
b11110 G#
b11110 L#
b11110 Q#
b10100 T
b10100 X
b10100 j
b100000 t
1&
b0 "
b0 )
b0 6
b0 C
b0 L
b0 a
b0 i
#7000
0&
#8000
b101010 /
b101010 =
b101010 P
b101010 W
b101010 [#
b1010 T
b1010 X
b1010 j
b11110 U
b11110 Y
b11110 b
b1010 >
b1010 Q
b1010 d
b1010 k
b1010 r
b11110 ?
b11110 J
b11110 R
b11110 c
b11110 e
b11110 q
0""
1'"
b1000z p
b100 1
b100 9
b100 n
b1 2
b1 8
b1 m
b11 3
b11 7
b11 l
b100011000001000110011 ,
b100011000001000110011 j#
b11110 %"
b101 4
b101 c#
b101 h#
b100 0
b100 e#
b100 g#
b100 i#
b10100 A
b10100 D
b10100 o
b10100 w
b10100 |
b10100 #"
b10100 ("
b10100 -"
b10100 2"
b10100 7"
b10100 <"
b10100 A"
b10100 F"
b10100 K"
b10100 P"
b10100 U"
b10100 Z"
b10100 _"
b10100 d"
b10100 i"
b10100 n"
b10100 s"
b10100 x"
b10100 }"
b10100 $#
b10100 )#
b10100 .#
b10100 3#
b10100 8#
b10100 =#
b10100 B#
b10100 G#
b10100 L#
b10100 Q#
b10100 I
b10100 ;
b10100 @
b10100 E
b10100 G
b10100 M
b10100 S
b10100 V
b100000 t
1&
1!
#9000
0&
#10000
b10110 /
b10110 =
b10110 P
b10110 W
b10110 [#
b11110 :
b11110 <
b11110 F
b11110 H
b0 >
b0 Q
b0 d
b0 k
b0 r
b11 Y#
b0 1
b0 9
b0 n
b0 2
b0 8
b0 m
b11 .
b11 5
b11 K
b11 f
b11 g
b1100011010000000100011 ,
b1100011010000000100011 j#
b110 4
b110 c#
b110 h#
b101 0
b101 e#
b101 g#
b101 i#
b10100 *"
b11 I
0'"
b11110 A
b11110 D
b11110 o
b11110 w
b11110 |
b11110 #"
b11110 ("
b11110 -"
b11110 2"
b11110 7"
b11110 <"
b11110 A"
b11110 F"
b11110 K"
b11110 P"
b11110 U"
b11110 Z"
b11110 _"
b11110 d"
b11110 i"
b11110 n"
b11110 s"
b11110 x"
b11110 }"
b11110 $#
b11110 )#
b11110 .#
b11110 3#
b11110 8#
b11110 =#
b11110 B#
b11110 G#
b11110 L#
b11110 Q#
b0 U
b0 Y
b0 b
b11 T
b11 X
b11 j
b11 ;
b11 @
b11 E
b11 G
b11 M
b11 S
b11 V
b0z p
b100000 t
1&
0!
0%
1$
b1 "
b1 )
b1 6
b1 C
b1 L
b1 a
b1 i
#11000
0&
#12000
b10100 ?
b10100 J
b10100 R
b10100 c
b10100 e
b10100 q
b101000 A
b101000 D
b101000 o
b101000 w
b101000 |
b101000 #"
b101000 ("
b101000 -"
b101000 2"
b101000 7"
b101000 <"
b101000 A"
b101000 F"
b101000 K"
b101000 P"
b101000 U"
b101000 Z"
b101000 _"
b101000 d"
b101000 i"
b101000 n"
b101000 s"
b101000 x"
b101000 }"
b101000 $#
b101000 )#
b101000 .#
b101000 3#
b101000 8#
b101000 =#
b101000 B#
b101000 G#
b101000 L#
b101000 Q#
b101000 :
b101000 <
b101000 F
b101000 H
b100 I
b100 ;
b100 @
b100 E
b100 G
b100 M
b100 S
b100 V
b100 T
b100 X
b100 j
b100 Y#
b100 .
b100 5
b100 K
b100 f
b100 g
b100 3
b100 7
b100 l
b10000100010000000100011 ,
b10000100010000000100011 j#
b111 4
b111 c#
b111 h#
b110 0
b110 e#
b110 g#
b110 i#
b100000 t
1&
#13000
0&
#14000
1@"
b100000000z p
b1010 T
b1010 X
b1010 j
b1010 Y#
b1010 .
b1010 5
b1010 K
b1010 f
b1010 g
b1001 1
b1001 9
b1001 n
b101000100010010010010011 ,
b101000100010010010010011 j#
b1000 4
b1000 c#
b1000 h#
b111 0
b111 e#
b111 g#
b111 i#
b101010 /
b101010 =
b101010 P
b101010 W
b101010 [#
bx :
bx <
bx F
bx H
b11110 I
b11110 ;
b11110 @
b11110 E
b11110 G
b11110 M
b11110 S
b11110 V
b11110 A
b11110 D
b11110 o
b11110 w
b11110 |
b11110 #"
b11110 ("
b11110 -"
b11110 2"
b11110 7"
b11110 <"
b11110 A"
b11110 F"
b11110 K"
b11110 P"
b11110 U"
b11110 Z"
b11110 _"
b11110 d"
b11110 i"
b11110 n"
b11110 s"
b11110 x"
b11110 }"
b11110 $#
b11110 )#
b11110 .#
b11110 3#
b11110 8#
b11110 =#
b11110 B#
b11110 G#
b11110 L#
b11110 Q#
b10100 U
b10100 Y
b10100 b
b100000 t
1&
1%
0$
b10 "
b10 )
b10 6
b10 C
b10 L
b10 a
b10 i
#15000
0&
#16000
b11110 ?
b11110 J
b11110 R
b11110 c
b11110 e
b11110 q
b1001 T
b1001 X
b1001 j
b1001 Y#
b1001 .
b1001 5
b1001 K
b1001 f
b1001 g
b0 1
b0 9
b0 n
b1001 3
b1001 7
b1001 l
b100101001010000000100011 ,
b100101001010000000100011 j#
b11110 C"
b1001 4
b1001 c#
b1001 h#
b1000 0
b1000 e#
b1000 g#
b1000 i#
b10110 /
b10110 =
b10110 P
b10110 W
b10110 [#
b1001 I
0@"
b1001 ;
b1001 @
b1001 E
b1001 G
b1001 M
b1001 S
b1001 V
b0z p
bx A
bx D
bx o
bx w
bx |
bx #"
bx ("
bx -"
bx 2"
bx 7"
bx <"
bx A"
bx F"
bx K"
bx P"
bx U"
bx Z"
bx _"
bx d"
bx i"
bx n"
bx s"
bx x"
bx }"
bx $#
bx )#
bx .#
bx 3#
bx 8#
bx =#
bx B#
bx G#
bx L#
bx Q#
b0 U
b0 Y
b0 b
b100000 t
1&
0%
1$
b1 "
b1 )
b1 6
b1 C
b1 L
b1 a
b1 i
#17000
0&
#18000
b11110 >
b11110 Q
b11110 d
b11110 k
b11110 r
b1000100 Y#
b11 2
b11 8
b11 m
b1000100 .
b1000100 5
b1000100 K
b1000100 f
b1000100 g
b11 3
b11 7
b11 l
b1 -
b1 Z#
b1 f#
b100001100011000001001100011 ,
b100001100011000001001100011 j#
b1010 4
b1010 c#
b1010 h#
b1001 0
b1001 e#
b1001 g#
b1001 i#
0+
b101001 /
b101001 =
b101001 P
b101001 W
b101001 [#
bx :
bx <
bx F
bx H
b11100 I
b111100 ;
b111100 @
b111100 E
b111100 G
b111100 M
b111100 S
b111100 V
b111100 A
b111100 D
b111100 o
b111100 w
b111100 |
b111100 #"
b111100 ("
b111100 -"
b111100 2"
b111100 7"
b111100 <"
b111100 A"
b111100 F"
b111100 K"
b111100 P"
b111100 U"
b111100 Z"
b111100 _"
b111100 d"
b111100 i"
b111100 n"
b111100 s"
b111100 x"
b111100 }"
b111100 $#
b111100 )#
b111100 .#
b111100 3#
b111100 8#
b111100 =#
b111100 B#
b111100 G#
b111100 L#
b111100 Q#
b11110 U
b11110 Y
b11110 b
b11110 T
b11110 X
b11110 j
b100000 t
1&
0$
b0 "
b0 )
b0 6
b0 C
b0 L
b0 a
b0 i
b1 (
b1 *
b1 \#
#19000
0&
#20000
b0 A
b0 D
b0 o
b0 w
b0 |
b0 #"
b0 ("
b0 -"
b0 2"
b0 7"
b0 <"
b0 A"
b0 F"
b0 K"
b0 P"
b0 U"
b0 Z"
b0 _"
b0 d"
b0 i"
b0 n"
b0 s"
b0 x"
b0 }"
b0 $#
b0 )#
b0 .#
b0 3#
b0 8#
b0 =#
b0 B#
b0 G#
b0 L#
b0 Q#
b0 :
b0 <
b0 F
b0 H
b0 I
b0 ;
b0 @
b0 E
b0 G
b0 M
b0 S
b0 V
b0 T
b0 X
b0 j
b0 U
b0 Y
b0 b
b0 >
b0 Q
b0 d
b0 k
b0 r
b0 ?
b0 J
b0 R
b0 c
b0 e
b0 q
b0 Y#
b0 .
b0 5
b0 K
b0 f
b0 g
b0 2
b0 8
b0 m
b0 3
b0 7
b0 l
b0 ,
b0 j#
b1011 4
b1011 c#
b1011 h#
b1010 0
b1010 e#
b1010 g#
b1010 i#
b100000 t
1&
1%
b111 (
b111 *
b111 \#
#21000
0&
#22000
b11110 A
b11110 D
b11110 o
b11110 w
b11110 |
b11110 #"
b11110 ("
b11110 -"
b11110 2"
b11110 7"
b11110 <"
b11110 A"
b11110 F"
b11110 K"
b11110 P"
b11110 U"
b11110 Z"
b11110 _"
b11110 d"
b11110 i"
b11110 n"
b11110 s"
b11110 x"
b11110 }"
b11110 $#
b11110 )#
b11110 .#
b11110 3#
b11110 8#
b11110 =#
b11110 B#
b11110 G#
b11110 L#
b11110 Q#
b10110 /
b10110 =
b10110 P
b10110 W
b10110 [#
b10100 :
b10100 <
b10100 F
b10100 H
b11110 I
b11110 ;
b11110 @
b11110 E
b11110 G
b11110 M
b11110 S
b11110 V
b10100 T
b10100 X
b10100 j
b1010 U
b1010 Y
b1010 b
b10100 >
b10100 Q
b10100 d
b10100 k
b10100 r
b1010 ?
b1010 J
b1010 R
b1010 c
b1010 e
b1010 q
1,"
b10000z p
b10 2
b10 8
b10 m
b101 1
b101 9
b101 n
b1 3
b1 7
b1 l
b1000001000001010110011 ,
b1000001000001010110011 j#
b1100 4
b1100 c#
b1100 h#
b1011 0
b1011 e#
b1011 g#
b1011 i#
b100000 t
1&
#23000
0&
#24000
bx A
bx D
bx o
bx w
bx |
bx #"
bx ("
bx -"
bx 2"
bx 7"
bx <"
bx A"
bx F"
bx K"
bx P"
bx U"
bx Z"
bx _"
bx d"
bx i"
bx n"
bx s"
bx x"
bx }"
bx $#
bx )#
bx .#
bx 3#
bx 8#
bx =#
bx B#
bx G#
bx L#
bx Q#
bx /
bx =
bx P
bx W
bx [#
bx :
bx <
bx F
bx H
bx I
bx ;
bx @
bx E
bx G
bx M
bx S
bx V
bx T
bx X
bx j
bx U
bx Y
bx b
bx >
bx Q
bx d
bx k
bx r
bx ?
bx J
bx R
bx c
bx e
bx q
xv
x{
x""
x'"
x,"
x1"
x6"
x;"
x@"
xE"
xJ"
xO"
xT"
xY"
x^"
xc"
xh"
xm"
xr"
xw"
x|"
x##
x(#
x-#
x2#
x7#
x<#
xA#
xF#
xK#
xP#
bxz p
b0xxxxxxxxxxxx Y#
bx 1
bx 9
bx n
bx 2
bx 8
bx m
b0xxxxxxxxxxxx .
b0xxxxxxxxxxxx 5
b0xxxxxxxxxxxx K
b0xxxxxxxxxxxx f
b0xxxxxxxxxxxx g
bx 3
bx 7
bx l
bx ,
bx j#
b11110 /"
b1101 4
b1101 c#
b1101 h#
b1100 0
b1100 e#
b1100 g#
b1100 i#
b100000 t
1&
#25000
0&
#26000
b1110 4
b1110 c#
b1110 h#
b1101 0
b1101 e#
b1101 g#
b1101 i#
b100000 t
1&
#27000
0&
#28000
b1111 4
b1111 c#
b1111 h#
b1110 0
b1110 e#
b1110 g#
b1110 i#
b100000 t
1&
#29000
0&
#30000
b0 A
b0 D
b0 o
b0 w
b0 |
b0 #"
b0 ("
b0 -"
b0 2"
b0 7"
b0 <"
b0 A"
b0 F"
b0 K"
b0 P"
b0 U"
b0 Z"
b0 _"
b0 d"
b0 i"
b0 n"
b0 s"
b0 x"
b0 }"
b0 $#
b0 )#
b0 .#
b0 3#
b0 8#
b0 =#
b0 B#
b0 G#
b0 L#
b0 Q#
b101001 /
b101001 =
b101001 P
b101001 W
b101001 [#
b0 :
b0 <
b0 F
b0 H
b0 I
b0 ;
b0 @
b0 E
b0 G
b0 M
b0 S
b0 V
b0 T
b0 X
b0 j
b0 U
b0 Y
b0 b
b0 >
b0 Q
b0 d
b0 k
b0 r
b0 ?
b0 J
b0 R
b0 c
b0 e
b0 q
b0 Y#
b0 .
b0 5
b0 K
b0 f
b0 g
b0 1
b0 9
b0 n
b0 2
b0 8
b0 m
b0 3
b0 7
b0 l
b0 -
b0 Z#
b0 f#
b0 ,
b0 j#
b0 4
b0 c#
b0 h#
b0 0
b0 e#
b0 g#
b0 i#
1+
0v
0{
0""
0'"
0,"
01"
06"
0;"
0@"
0E"
0J"
0O"
0T"
0Y"
0^"
0c"
0h"
0m"
0r"
0w"
0|"
0##
0(#
0-#
02#
07#
0<#
0A#
0F#
0K#
0P#
b0z p
b100000 t
1&
1'
0#
0%
b0 (
b0 *
b0 \#
